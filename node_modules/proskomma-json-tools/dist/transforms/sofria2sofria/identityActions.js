"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
var identityActions = {
  startDocument: [{
    description: "identity",
    test: () => true,
    action: _ref => {
      var {
        config,
        context,
        workspace,
        output
      } = _ref;
      output.sofria = {};
      output.sofria.schema = context.document.schema;
      output.sofria.metadata = context.document.metadata;
      output.sofria.sequence = {};
      workspace.currentSequence = output.sofria.sequence;
      workspace.chapter = null;
      workspace.verses = null;
      workspace.cachedChapter = null;
      workspace.cachedVerses = null;
    }
  }],
  endDocument: [{
    description: "identity",
    test: () => true,
    action: _ref2 => {
      var {
        config,
        context,
        workspace,
        output
      } = _ref2;
    }
  }],
  startSequence: [{
    description: "identity",
    test: () => true,
    action: _ref3 => {
      var {
        context,
        workspace
      } = _ref3;
      workspace.currentSequence.type = context.sequences[0].type;
      workspace.currentSequence.blocks = [];
    }
  }],
  endSequence: [{
    description: "identity",
    test: () => true,
    action: _ref4 => {
      var {
        workspace
      } = _ref4;
      if (workspace.currentSequence.type === 'main') {
        workspace.chapter = null;
        workspace.verses = null;
      }
      workspace.currentSequence = null;
    }
  }],
  blockGraft: [{
    description: "identity",
    test: () => true,
    action: environment => {
      var currentBlock = environment.context.sequences[0].block;
      var graftRecord = {
        type: currentBlock.type
      };
      if (currentBlock.sequence) {
        graftRecord.sequence = {};
        var cachedSequencePointer = environment.workspace.currentSequence;
        environment.workspace.currentSequence = graftRecord.sequence;
        environment.context.renderer.renderSequence(environment);
        environment.workspace.currentSequence = cachedSequencePointer;
      }
      environment.workspace.currentSequence.blocks.push(graftRecord);
    }
  }],
  startParagraph: [{
    description: "identity",
    test: () => true,
    action: _ref5 => {
      var {
        context,
        workspace
      } = _ref5;
      var currentBlock = context.sequences[0].block;
      var paraRecord = {
        type: currentBlock.type,
        subtype: currentBlock.subType,
        content: []
      };
      workspace.currentSequence.blocks.push(paraRecord);
      workspace.currentContent = paraRecord.content;
      workspace.outputBlock = workspace.currentSequence.blocks[workspace.currentSequence.blocks.length - 1];
      workspace.outputContentStack = [workspace.outputBlock.content];
      if (workspace.currentSequence.type === "main") {
        for (var cv of ['chapter', 'verses']) {
          if (workspace[cv]) {
            var wrapperRecord = {
              type: 'wrapper',
              subtype: cv,
              content: [],
              atts: {
                number: workspace[cv]
              }
            };
            workspace.outputContentStack[0].push(wrapperRecord);
            workspace.outputContentStack.unshift(wrapperRecord.content);
          }
        }
      }
    }
  }],
  endParagraph: [{
    description: "identity",
    test: () => true,
    action: _ref6 => {
      var {
        workspace
      } = _ref6;
    }
  }],
  metaContent: [{
    description: "identity",
    test: () => true,
    action: environment => {
      var {
        context,
        workspace
      } = environment;
      var element = context.sequences[0].element;
      workspace.currentContent = element.metaContent;
      var lastOutputItem = workspace.outputContentStack[1][workspace.outputContentStack[1].length - 1];
      lastOutputItem.meta_content = [];
      workspace.outputContentStack.unshift(lastOutputItem.meta_content);
      context.renderer.renderContent(workspace.currentContent, environment);
      workspace.outputContentStack.shift();
    }
  }],
  mark: [{
    description: "identity",
    test: () => true,
    action: _ref7 => {
      var {
        context,
        workspace
      } = _ref7;
      var element = context.sequences[0].element;
      var markRecord = {
        type: element.type,
        subtype: element.subType
      };
      if (element.atts) {
        markRecord.atts = element.atts;
      }
      workspace.outputContentStack[0].push(markRecord);
    }
  }],
  inlineGraft: [{
    description: "identity",
    test: () => true,
    action: environment => {
      var element = environment.context.sequences[0].element;
      var graftRecord = {
        type: element.type,
        subtype: element.subType,
        sequence: {}
      };
      var cachedSequencePointer = environment.workspace.currentSequence;
      var cachedOutputContentStack = [...environment.workspace.outputContentStack];
      environment.workspace.currentSequence = graftRecord.sequence;
      environment.context.renderer.renderSequence(environment);
      environment.workspace.outputContentStack = cachedOutputContentStack;
      environment.workspace.currentSequence = cachedSequencePointer;
      environment.workspace.outputContentStack[0].push(graftRecord);
    }
  }],
  startWrapper: [{
    description: "identity",
    test: () => true,
    action: _ref8 => {
      var {
        context,
        workspace
      } = _ref8;
      var element = context.sequences[0].element;
      // console.log(element)
      if (element.subType === "chapter") {
        workspace.chapter = element.atts.number;
        workspace.cachedChapter = workspace.chapter;
      } else if (element.subType === "verses") {
        workspace.verses = element.atts.number;
        workspace.cachedVerses = workspace.verses;
      }
      var wrapperRecord = {
        type: element.type,
        subtype: element.subType,
        content: []
      };
      if ('atts' in element) {
        wrapperRecord.atts = _objectSpread({}, element.atts);
      }
      if (workspace.outputContentStack.length === 0) {
        throw new Error("outputContentStack is empty before pushing to its first element, near ".concat(context.document.metadata.document.bookCode, " ").concat(workspace.cachedChapter, ":").concat(workspace.cachedVerses));
      }
      workspace.outputContentStack[0].push(wrapperRecord);
      workspace.outputContentStack.unshift(wrapperRecord.content);
    }
  }],
  endWrapper: [{
    description: "identity",
    test: () => true,
    action: _ref9 => {
      var {
        context,
        workspace
      } = _ref9;
      var element = context.sequences[0].element;
      if (element.subType === "chapter") {
        workspace.chapter = null;
      } else if (element.subType === "verses") {
        workspace.verses = null;
      }
      workspace.outputContentStack.shift();
    }
  }],
  startMilestone: [{
    description: "identity",
    test: () => true,
    action: _ref10 => {
      var {
        context,
        workspace
      } = _ref10;
      var element = context.sequences[0].element;
      var milestoneRecord = {
        type: element.type,
        subtype: element.subType
      };
      if (element.atts) {
        milestoneRecord.atts = element.atts;
      }
      workspace.outputContentStack[0].push(milestoneRecord);
    }
  }],
  endMilestone: [{
    description: "identity",
    test: () => true,
    action: _ref11 => {
      var {
        context,
        workspace
      } = _ref11;
      var element = context.sequences[0].element;
      var milestoneRecord = {
        type: element.type,
        subtype: element.subType
      };
      workspace.outputContentStack[0].push(milestoneRecord);
    }
  }],
  text: [{
    description: "identity",
    test: () => true,
    action: _ref12 => {
      var {
        context,
        workspace
      } = _ref12;
      var element = context.sequences[0].element;
      workspace.outputContentStack[0].push(element.text);
    }
  }]
};
var _default = identityActions;
exports.default = _default;