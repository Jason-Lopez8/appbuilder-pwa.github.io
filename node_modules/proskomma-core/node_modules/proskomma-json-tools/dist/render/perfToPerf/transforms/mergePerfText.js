"use strict";

var _deepCopyAll = _interopRequireDefault(require("deep-copy-all"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var doMerge1 = content => {
  var ret = [];
  for (var element of content) {
    if (typeof element === 'string') {
      if (ret.length > 0 && typeof ret[ret.length - 1] === 'string') {
        ret[ret.length - 1] += element;
      } else {
        ret.push(element);
      }
    } else {
      if (element.content) {
        element.content = doMerge1(element.content);
      }
      if (element.metaContent) {
        element.metaContent = doMerge1(element.content);
      }
      ret.push(element);
    }
  }
  return ret;
};
var doMerge = perf => {
  var newPerf = (0, _deepCopyAll.default)(perf);
  for (var seq of Object.values(newPerf.sequences)) {
    for (var block of seq.blocks) {
      if (block.content) {
        block.content = doMerge1(block.content);
      }
      if (block.metaContent) {
        block.metaContent = doMerge1(block.metaContent);
      }
    }
  }
  return newPerf;
};
var mergePerfTextCode = function mergePerfTextCode(_ref) {
  var {
    perf
  } = _ref;
  return {
    perf: doMerge(perf)
  };
};
var mergePerfText = {
  name: "mergePerfText",
  type: "Transform",
  description: "PERF=>PERF: Merge consecutive text strings",
  inputs: [{
    name: "perf",
    type: "json",
    source: ""
  }],
  outputs: [{
    name: "perf",
    type: "json"
  }],
  code: mergePerfTextCode
};
module.exports = {
  mergePerfText,
  mergePerfTextCode
};