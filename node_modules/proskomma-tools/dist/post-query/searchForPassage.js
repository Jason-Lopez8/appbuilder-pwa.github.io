"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.searchForVersesFilter = exports.searchForBlocksFilter = void 0;

var searchForBlocksFilter = _ref => {
  var _data$docSet, _data$docSet$document, _data$docSet$document2, _data$docSet$document3;

  var {
    data
  } = _ref;
  var passages = [];
  passages = data === null || data === void 0 ? void 0 : (_data$docSet = data.docSet) === null || _data$docSet === void 0 ? void 0 : (_data$docSet$document = _data$docSet.document) === null || _data$docSet$document === void 0 ? void 0 : (_data$docSet$document2 = _data$docSet$document.mainSequence) === null || _data$docSet$document2 === void 0 ? void 0 : (_data$docSet$document3 = _data$docSet$document2.blocks) === null || _data$docSet$document3 === void 0 ? void 0 : _data$docSet$document3.map(block => {
    var docSetId = data.docSet.id;
    var bookCode = data.docSet.document.bookCode;
    var chapter = block.scopeLabels.filter(sl => sl.startsWith('chapter'))[0].split('/')[1];
    var verses = block.scopeLabels.filter(sl => sl.startsWith('verse')).map(sl => sl.split('/')[1]).map(vns => parseInt(vns));
    var verse = verses.length > 1 ? "".concat(verses[0], "-").concat(verses[verses.length - 1]) : verses[0];
    var reference = "".concat(bookCode, " ").concat(chapter, ":").concat(verse); // {bookCode, chapter, verse};
    // const matches = data.docSet.matches.map(m => m.matched);

    var itemGroups = block.itemGroups;
    var text = itemGroups.map(itemGroup => itemGroup.text).join(' ');
    return {
      docSetId,
      reference,
      text
    };
  });
  return passages;
};

exports.searchForBlocksFilter = searchForBlocksFilter;

var searchForVersesFilter = _ref2 => {
  var _data$docSet2, _data$docSet2$documen, _data$docSet2$documen2;

  var {
    data
  } = _ref2;
  var passages = [];
  passages = data === null || data === void 0 ? void 0 : (_data$docSet2 = data.docSet) === null || _data$docSet2 === void 0 ? void 0 : (_data$docSet2$documen = _data$docSet2.document) === null || _data$docSet2$documen === void 0 ? void 0 : (_data$docSet2$documen2 = _data$docSet2$documen.cvMatching) === null || _data$docSet2$documen2 === void 0 ? void 0 : _data$docSet2$documen2.map(cvMatch => {
    var docSetId = data.docSet.id;
    var bookCode = data.docSet.document.bookCode;
    var chapter = cvMatch.scopeLabels.filter(sl => sl.startsWith('chapter'))[0].split('/')[1];
    var verses = cvMatch.scopeLabels.filter(sl => sl.startsWith('verse')).map(sl => sl.split('/')[1]).map(vns => parseInt(vns));
    var verse = verses.length > 1 ? "".concat(verses[0], "-").concat(verses[verses.length - 1]) : verses[0];
    var reference = "".concat(bookCode, " ").concat(chapter, ":").concat(verse); // {bookCode, chapter, verse};
    // const matches = data.docSet.matches.map(m => m.matched);

    var text = cvMatch.text;
    return {
      docSetId,
      reference,
      text
    };
  });
  return passages;
};

exports.searchForVersesFilter = searchForVersesFilter;