"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _index = require("../pre-query/index.js");

var searchForPassagesQuery = _ref => {
  var {
    text,
    docSetId,
    bookCode,
    blocks = false,
    tokens = false
  } = _ref;

  var _searchTermsClause = (0, _index.searchTermsClause)(text);

  var _attTermsClause = (0, _index.attTermsClause)(text);

  var _searchTermsRegex = (0, _index.searchTermsRegex)(text);

  var _tokensClause = tokens ? "tokens {\n                subType\n                payload\n                scopes(\n                    startsWith:[\n                    \"attribute/spanWithAtts/w/\"\n                    \"attribute/milestone/zaln/\"\n                    ]\n                )\n                }\n    " : '';

  var _blocksClause = "mainSequence {\n            blocks(\n            allChars : true\n            withMatchingChars: [".concat(_searchTermsClause, "]\n            withScopes: [").concat(_attTermsClause, "]\n            ) {\n            scopeLabels(startsWith:[\"chapter/\", \"verse/\"])\n            itemGroups(byScopes:[\"chapter/\", \"verses/\"]) {\n                scopeLabels(startsWith:[\"verses/\"])\n                text\n                ").concat(_tokensClause, "          }\n            }\n        }");

  var _versesClause = "cvMatching(\n            allChars : true\n            allScopes : true\n            withMatchingChars: [".concat(_searchTermsClause, "]\n            withScopes: [").concat(_attTermsClause, "]\n        ) {\n            scopeLabels(startsWith:[\"chapter/\", \"verse/\"])\n            text\n            ").concat(_tokensClause, "      }");

  var _blocksOrVersesClause = blocks ? _blocksClause : _versesClause;

  var blockMatchQuery = "{\n    docSet(id:\"".concat(docSetId, "\") {\n        id\n        document(\n        bookCode:\"").concat(bookCode === null || bookCode === void 0 ? void 0 : bookCode.toUpperCase(), "\" \n        ) {\n        id\n        bookCode: header(id: \"bookCode\")\n        ").concat(_blocksOrVersesClause, "\n        }\n        matches: enumRegexIndexesForString (enumType:\"wordLike\" searchRegex:\"").concat(_searchTermsRegex, "\") { matched }\n    }\n    }");
  return blockMatchQuery;
};

var _default = searchForPassagesQuery;
exports.default = _default;